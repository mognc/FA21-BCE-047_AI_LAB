# -*- coding: utf-8 -*-
"""Lab8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n1omrombSBwA3Y3kzSF8WLC2OE7jdeJN
"""

from keras.models import Sequential
from keras.layers import Dense, Dropout
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import numpy as np
from sklearn import linear_model
from sklearn import preprocessing
from sklearn import tree
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
import pandas as pd
import csv

import matplotlib.pyplot as plt

from google.colab import files
u = files.upload()

np.random.seed(7)
df = pd.read_csv("Alumni Giving Regression (Edited).csv",delimiter=",")
dd_df_1 = df.head()

import seaborn as sns
boxplot = pd.DataFrame(df).boxplot()

quantile99 = df.iloc[:,0].quantile(0.99)
df1 = df[df.iloc[:,0]< quantile99]
df1.boxplot()

quantile1 = df.iloc[:,0].quantile(0.01)
quantile99 = df.iloc[:,0].quantile(0.99)
df2  = df[(df.iloc[:,0] > quantile1) & (df.iloc[:,0] < quantile99)]
df2.boxplot()

df.dropna()

Y_POSITION = 5
model_2_features = [i for i in range(0,Y_POSITION)]
X = df.iloc[:,model_2_features]
Y = df.iloc[:,Y_POSITION]
X_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.20,random_state=2020)

model3 = RandomForestRegressor()
model3.fit(X_train,y_train)

RF = model3
importances = RF.feature_importances_
std = np.std([tree.feature_importances_ for tree in RF.estimators_], axis=0)
indices = np.argsort(importances)[::-1]
corr = df.corr(method='pearson')
corr
print(corr)
print("Feature ranking: ")
for f in range(X.shape[1]):
  print("%d. feature (Column index) %s (%f)" % (f + 1, indices[f], importances[indices[f]]))

indices_top3 = indices[:3]
print(indices_top3)
dataset = df
df = pd.DataFrame(df)
Y_POSITION = 5
TOP_N_FEATURE = 3
model_1_features = [i for i in range(0,Y_POSITION)]
X = df.iloc[:,indices_top3]
Y = df.iloc[:,Y_POSITION]
X_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.20,random_state=2020)

model1 = linear_model.LinearRegression()
model1.fit(X_train,y_train)
y_pred_train1 = model1.predict(X_train)
print("Regression")
print("=============================")
RMSE_train1 = mean_squared_error(y_train,y_pred_train1)
print("Regression Train set: RMSE {}".format(RMSE_train1))
print("==========================")
y_pred1 = model1.predict(X_test)
RMSE_test1 = mean_squared_error(y_test,y_pred1)
print("Regression Test set: RMSE {}".format(RMSE_test1))
print("==================")