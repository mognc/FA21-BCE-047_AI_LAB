# -*- coding: utf-8 -*-
"""Lab6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v2xxiD_Pg_o3OSwhpgnEEiL52GoRhgQy
"""

from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error
import numpy as np
import pandas as pd
import csv
from sklearn import preprocessing
from sklearn import tree
from sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor
from keras.models import Sequential
from keras.layers import Dense, Dropout
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

from google.colab import files
u = files.upload()
np.random.seed(7)
df = pd.read_csv("Alumni Giving Regression (Edited).csv",
delimiter=',')
dd_df_1 = df.head()

Y_POSITION = 5
model_2_features = [i for i in range(0,Y_POSITION)]
X = df.iloc[:,model_2_features]
Y = df.iloc[:,Y_POSITION]
X_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.20,random_state=2020)

model2 = tree.DecisionTreeRegressor()
model2.fit(X_train, y_train)
print("Decision Tree")
print("=======================")
y_pred_train2 = model2.predict(X_train)
RMSE_train2 = mean_squared_error(y_train, y_pred_train2)
print("Decision Tree Train set : RMSE {}".format(RMSE_train2))

y_pred_test2 = model2.predict(X_test)
RMSE_test2 = mean_squared_error(y_test,y_pred_test2)
print("Decision Tree Test set: RMSE {}".format(RMSE_test2))
print("=======================")

x_values = np.arange(len(y_test))
plt.scatter(x_values,y_test,color='red',label='Actual')
plt.scatter(x_values,y_pred_test2,color='blue',label='Predicted')
plt.xlabel('Index or Sequence of Values')
plt.ylabel('Values')
plt.title('Actual vs Predicted Values')
plt.legend()
plt.show()

x_values = np.arange(len(y_train))
plt.scatter(x_values,y_train,color='red',label='Actual')
plt.scatter(x_values,y_pred_train2,color='blue',label='Predicted')
plt.xlabel('Index or Sequence of Values')
plt.ylabel('Values')
plt.title('Actual vs Predicted Values')
plt.legend()
plt.show()

model3 = RandomForestRegressor()
model3.fit(X_train,y_train)
print("Random Forest Regressor")
print("=============")
y_pred_train3 = model3.predict(X_train)
RMSE_train3 = mean_squared_error(y_train,y_pred_train3)
print("Random Forest Regressor TrainSet : RMSE {}".format(RMSE_train3))
print("======================")
y_pred_test3 = model3.predict(X_test)
RMSE_test3 = mean_squared_error(y_test,y_pred_test3)
print("Random Forest Regressor TestSet: RMSE{}".format(RMSE_test3))
print("=======================")

x_values = np.arange(len(y_train))
plt.scatter(x_values,y_train,color='red',label='Actual')
plt.scatter(x_values,y_pred_train3,color='blue',label='Predicted')
plt.xlabel('Index or Sequence of Values')
plt.ylabel('Values')
plt.title('Actual vs Predicted Values')
plt.legend()
plt.show()